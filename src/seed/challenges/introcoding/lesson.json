{
  "challenges": [
    {
      "name": "What is Coding",
      "section": "introcoding",
      "number": 1,
      "description": "Coding otherwise known as programming is an idea about telling a computer what to do. Everything that you see on your screen whether that is your phone or your computer has computer code running beneath it which tells the computer what to do. There are a lot of different types of programming like embedded programming which works on things like the operating system, or web development which works on things like websites, similar to this one.",
      "tests": [
        {
          "text": "set value to 20",
          "test": "assert()"
        }
      ],
      "definitions": [
        "Supervised Learning,1",
        "Linear Regression,0"
      ],
      "codeblocks": false,
      "hints": [

      ]
    }, 
    {
      "name": "Add a variable",
      "section": "introcoding",
      "number": 2,
      "description": "In computer programming, variables are used to store information to be referenced later. For example you can use the variable block and make a variable <code>x</code> and set it too 3.",
      "tests": [
        {
          "text": "second part"
        }
      ],
      "definitions": [
        "Supervised Learning,1",
        "Linear Regression,0"
      ],
      "codeblocks": false
    }, 
    {
      "name": "Print variable",
      "section": "introcoding",
      "number": 3, 
      "description": "Another part of programming is printing our output. Below, there is a console which can be used to print text, or things such as the variable. Use the print function and print <code>x</code>, and you will then see the output in the console.",
      "tests": [
        {

        }
      ],
      "definitions": [
        "Supervised Learning,1",
        "Linear Regression,0"
      ],
      "codeblocks": false
    },
    {
      "name": "Functions",
      "section": "introcoding",
      "number": 4, 
      "description": "Functions are another big part of programming, it can be thought of a block of code that can be called. This makes the code reusable as you can call it more than once as well as keep code separated and better. Make a function using the function block and call it <code>z</code> and inside it, make a variable y and set it to some text. Then print the variable inside of the function.",
      "tests": [
        {
      
        }
      ],
      "definitions": [
        "Supervised Learning,1",
        "Linear Regression,0"
      ],
      "codeblocks": true
    },
    {
      "name": "Call the function",
      "section": "introcoding",
      "number": 5, 
      "description": "The beauty of a function is how you can call it whenever you want. You can call function z now. Try calling it twice and see the output come twice in the console.",
      "tests": [
        {

        }
      ], 
      "codeblocks": true 
    }, 
    {
      "name": "Add arguments to function",
      "section": "introcoding",
      "number": 6, 
      "description": "You can add arguments to functions, when you call the function next to the name you can add variables that you can then use in your code and assign it to a value when you call the function. Add an argument next to the function name, use it when you call print inside the function.",
      "tests": [
        {
      
        }
      ],
      "codeblocks": true
    },
    {
      "name": "Use the argument",
      "number": 7,
      "description": "Now when you call the function next to the name that you want to call you can also add any text that you want and that would be passed down to the function as an argument. You can set it to whatever text you want and our function would print it. Call the function and type up whatever text you want to add. ",
      "tests": [
        {

        }
      ],
      "codeblocks": true
    },
    {
      "name": "If statements",
      "number": 8,
      "description": "Similar to a yes or no question, an <code>if</code> statement has a instruction say it can check if a variable is equal to text. If that is true, a block of code would get executed and if it is false nothing would be executed. Try making an if statement and printing a number to the console.",
      "tests": [
        {
          "test": ""
        }
      ], 
      "codeblocks": true
    },
    {
      "name": "Else Statements",
      "number": 9, 
      "description": "If the if statement returns false, then you can also execute whatever code you want with an <code>else</code> statement. Add it to the end of an if statement and return text. Now, if the condition returns false, that text would get returned in the console.",
      "codeblocks": false
    }
  ] 
}